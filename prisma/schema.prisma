// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role           @default(USER)
  accounts      Account[]
  sessions      Session[]
  files         File[]
  papers        Paper[]
  registrations Registration[]
}

model Registration {
  id           String   @id @default(cuid())
  userId       String
  conferenceId String
  submittedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Paper {
  id            String          @id @default(cuid())
  title         String
  abstract      String
  status        PaperStatus      @default(PENDING)
  payment       Payment?         // Relation to Payment
  url           String?          // Optional URL for additional resources
  userId        String
  file          File?            @relation // Define relation without fields/references here
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  user          User             @relation(fields: [userId], references: [id])
  authors       Author[]         @relation("PaperAuthors")
  coAuthors     CoAuthor[]       @relation("PaperCoAuthors")
}

model Author {
  id         String   @id @default(cuid())
  name       String
  email      String
  mobile     String
  designation String
  institute  String
  paperId    String

  paper      Paper    @relation("PaperAuthors", fields: [paperId], references: [id], onDelete: Cascade)
}

model CoAuthor {
  id         String   @id @default(cuid())
  name       String
  email      String
  designation String
  institute  String
  paperId    String

  paper      Paper    @relation("PaperCoAuthors", fields: [paperId], references: [id], onDelete: Cascade)
}

model File {
  id         String   @id @default(cuid())
  name       String
  fileUrl    String // URL on Edge Store
  fileSize   Int
  userId     String
  paperId    String?   @unique // Make this field unique for a one-to-one relation
  uploadedAt String

  uploadedBy User     @relation(fields: [userId], references: [id])
  paper      Paper?   @relation(fields: [paperId], references: [id]) // Define fields/references here
}

model Payment {
  id         Int           @id @default(autoincrement())
  paperId    String        @unique
  amount     Decimal
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  paper      Paper @relation(fields: [paperId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum PaperStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

